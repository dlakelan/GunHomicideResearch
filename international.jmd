# Comparisons of International Homicide and Gun Ownership

```julia{results="hidden"}
using Pkg
Pkg.activate(".")

using CSV,DataFrames,Downloads,DataFramesMeta, StatsPlots, XLSX, 
    Dates, Statistics, Turing, LinearAlgebra, Interpolations, Serialization,
    GLM, Colors, ColorSchemes

```

```julia

function getifnotthere(filename,URL)
    if !Base.Filesystem.ispath(filename)
        # see https://www.aic.gov.au/statistics/homicide
        Downloads.download(URL,filename)
    end
end

getifnotthere("data/intl-homicides-unodc.xlsx","https://dataunodc.un.org/sites/dataunodc.un.org/files/data_cts_intentional_homicide.xlsx")
getifnotthere("data/country-populations-unpop.xlsx","https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/EXCEL_FILES/1_General/WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx")

homdata = DataFrame(XLSX.readtable("./data/intl-homicides-unodc.xlsx",1; first_row=3)...)
rename!(homdata,Dict(Symbol("Unit of measurement") => :units, :VALUE => :homicide))
@subset!(homdata,:Indicator .== "Victims of intentional homicide" .&& :Dimension .== "Total" .&& :Sex .== "Total")

popdata = DataFrame(XLSX.readtable("./data/country-populations-unpop.xlsx",1,"A:BM"; first_row=17)...) 
rename!(popdata,Dict(Symbol("ISO3 Alpha-code") => :Iso3_code, 
    Symbol("Region, subregion, country or area *") => :country,
    Symbol("Total Population, as of 1 January (thousands)") => :PopulationJan,
        Symbol("Population Density, as of 1 July (persons per square km)") => :popdensperkm2,
        Symbol("Median Age, as of 1 July (years)") => :medianage))

@rtransform!(popdata,:PopulationJan = if :PopulationJan == "..." missing else :PopulationJan .* 1000.0 end)

countrycodes = unique(@select(popdata,:country,:Iso3_code))


alldat = @orderby(@subset(leftjoin(homdata,popdata; on = [:Iso3_code,:Year],matchmissing=:notequal),
    :units .== "Counts"), :Iso3_code,:Year)
    
bigcount = @subset(alldat,:PopulationJan .> 20e6)
let p = []
    for r in unique(bigcount.Region)
        dat = @subset(bigcount,:Region .== r)
        push!(p,plot(dat.Year,dat.homicide ./ dat.PopulationJan .* 100000.0; group=dat.Iso3_code, legend=:topleft, title="Homicide Rate\n$r"))
    end
    plot(p...,size=(1000,1000))
end



```


# How does homicide rate compare to gun ownership rate?

```julia
getifnotthere("data/worldbank-gini-data.zip","https://api.worldbank.org/v2/en/indicator/SI.POV.GINI?downloadformat=csv")

ginidat = CSV.read("data/API_SI.POV.GINI_DS2_en_csv_v2_4333947.csv",DataFrame; skipto=6, header=5)
ginidat = ginidat[:,1:end-1] # drop meaningless final column
rename!(ginidat,Dict(Symbol("Country Name") => :Country, Symbol("Country Code") => :countrycode, 
    Symbol("Indicator Name") => :indicator, Symbol("Indicator Code") => :indicatorcode))
ginistack = DataFramesMeta.stack(ginidat,Not([:Country, :countrycode,:indicator,:indicatorcode]))
rename!(ginistack,Dict("variable" => "Year", "value" => "ginicoef"))
ginistack.Year = tryparse.(Int64,ginistack.Year)

alldat2 = leftjoin(alldat,ginistack; on = [:Iso3_code => :countrycode, :Year], makeunique=true)

p = @df @subset(alldat2,:PopulationJan .> 1e6) scatter(:ginicoef, :homicide ./ :PopulationJan .* 100000.0; title="Homicide Rate vs Inequality",ylab="Homicides/100k",xlab="Gini Index 0-100")
display(p)

p = @df @subset(alldat2,:PopulationJan .> 1e6) scatter(:ginicoef, log.(:homicide ./ :PopulationJan .* 100000.0); group=:Iso3_code, title="Homicide Rate vs Inequality",ylab="log(Homicides/100k)",xlab="Gini Index 0-100",legend=false, alpha=0.5)
display(p)

gdp = CSV.read("data/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_4251004.csv",DataFrame; header=5,skipto=6)
rename!(gdp,[Symbol("Country Name") => :country, Symbol("Country Code") => :ccode])
gdp = gdp[:,1:end-1]
gdpstack = DataFramesMeta.stack(gdp,Not(["country","ccode","Indicator Name","Indicator Code"]))

rename!(gdpstack,Dict("variable" => "Year", "value" => "gdp2020dol"))
gdpstack.Year = tryparse.(Int64,gdpstack.Year)

alldat3 = leftjoin(alldat2,gdpstack; on = [:Iso3_code => :ccode, :Year],makeunique=true)

alldat3.medianage = map(x -> if typeof(x) != Float64 missing else x end,alldat3.medianage)
alldat3.popdensperkm2 = map(x -> if typeof(x) != Float64 missing else x end,alldat3.popdensperkm2)


p = @df alldat3 scatter(log.(:gdp2020dol), log.(:homicide ./ :PopulationJan .*100000.0); title="Log Homicide vs Log GDP/capita",
    xlab="log(GDP/capita)",ylab="log(homicide/100k/yr)", legend=false, alpha=0.2,smooth=true,linewidth=5)
display(p)
```

How about a simple linear model?

```julia
alldat3.loghom = log.((alldat3.homicide .+ 0.1) ./ alldat3.PopulationJan .* 100e3)
alldat3.loggdppc = log.(alldat3.gdp2020dol)
alldat3.logpopdens = log.(alldat3.popdensperkm2)

mod = lm(@formula(loghom  ~ loggdppc + ginicoef + logpopdens  ),alldat3)

@df alldat3 plot(:ginicoef, residuals(mod))

alldat4 = @subset(alldat3,.!ismissing.(alldat3.gdp2020dol) .&& .! ismissing.(alldat3.ginicoef))

p = scatter(alldat4.ginicoef,predict(mod,alldat4),alpha=.1, title="Log(Homicide rate) vs Gini\nPredicted",ylim=(-4,4))
display(p)
p = scatter(alldat4.ginicoef,alldat4.loghom; marker_z=alldat4.gdp2020dol ./ 75000.0, legend=false, seriescolor = cgrad([:lightgrey,:darkblue]), title="Log(Homicide rate) vs Gini\nActual (Color = GDP/capita)",ylim=(-4,4))

display(p)

p = scatter(alldat4.ginicoef,alldat4.loghom;  color = "lightgrey", title="Log(Homicide rate) vs Gini",
    ylim=(-4,4),xlim=(25,60),label="worldwide",legend=false,size=(500,500),alpha=0.05)

countries = ("USA","AUT","AUS","CHE","ISR","NLD","NOR","ESP","DEU","FRA","CZE","GRC","BRA","MEX","ARG","CAN")
colors = [get(colorschemes[:rainbow],(i-1) / length(countries)) for i in 1:length(countries)]
selectcountry = @subset(alldat4,in.(alldat4.Iso3_code,Ref(countries)))
#@df selectcountry scatter!(:ginicoef,:loghom,markercolor=colors[indexin(:Iso3_code,collect(countries))])

countrydat = @by(@subset(alldat4,in.(:Iso3_code,Ref(countries)) .&& .! ismissing.(:ginicoef)),:Iso3_code,
    :ginimean = mean(:ginicoef),
    :loghommean = mean(:loghom))


annotations = [(countrydat.ginimean[i],countrydat.loghommean[i],(countrydat.Iso3_code[i],8,colors[i])) for i in 1:nrow(countrydat)]
annotate!(annotations)
display(p)


```

# How about age and density?

```julia



p = @df alldat3 scatter(:medianage, :loghom, title="Log homicide vs median age")
display(p)
p = @df alldat3 scatter(log.(:popdensperkm2), :loghom, title="Log homicide vs Log Pop Density")
display(p)

```
